import { useContext, useEffect, useState } from "react";
import { MyUserContext } from "../configs/MyContexts";
import { Button, Card, Container, Row, Col, Alert } from "react-bootstrap";
import { authApis, endpoints } from "../configs/Apis";
import { Link, useNavigate } from "react-router-dom";
import MySpinner from "./layout/MySpinner";

const ReminderList = () => {
    const user = useContext(MyUserContext);
    const [reminders, setReminders] = useState([]);
    const [loading, setLoading] = useState(false);
    const [msg, setMsg] = useState("");
    const [search, setSearch] = useState("");
    const [page, setPage] = useState(1);
    const nav = useNavigate();

    useEffect(() => {
        const loadReminders = async () => {
            if (page > 0) {
                setLoading(true);
                try {
                    let params = { page };
                    if (search) params.kw = search;

                    const res = await authApis().get(endpoints["reminders"], { params });

                    if (page === 1) {
                        setReminders(res.data); // Trang ƒë·∫ßu: g√°n m·ªõi
                    } else if (res.data.length > 0) {
                        setReminders(prev => [...prev, ...res.data]); // Trang ti·∫øp: n·ªëi th√™m
                    } else {
                        setPage(0); // H·∫øt d·ªØ li·ªáu
                    }
                } catch (err) {
                    console.error(err);
                    setMsg("L·ªói khi t·∫£i danh s√°ch nh·∫Øc nh·ªü.");
                } finally {
                    setLoading(false);
                }
            }
        };

        loadReminders();
    }, [page, search]);

    // Reset l·∫°i ph√¢n trang khi thay ƒë·ªïi t·ª´ kh√≥a
    useEffect(() => {
        setPage(1);
    }, [search]);

    const deleteReminder = async (reminderId) => {
        if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° nh·∫≠t k√≠ n√†y kh√¥ng?")) {
            try {
                await authApis().delete(endpoints.delete_reminder(reminderId));
                setMsg("ƒê√£ xo√° th√†nh c√¥ng");
                // G·ªçi l·∫°i API ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
                setReminders(reminders.filter(p => p.id !== reminderId));
            } catch (err) {
                console.error(err);
                setMsg("C√≥ l·ªói x·∫£y ra khi xo√°!");
            }
        }
    };

    // T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 1 gi√¢y
    useEffect(() => {
        if (msg) {
            const timer = setTimeout(() => setMsg(""), 1000);
            return () => clearTimeout(timer);
        }
    }, [msg]);

    if (!user) {
        return (
            <Container className="mt-4 text-center">
                <p className="text-danger">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem danh s√°ch nh·∫Øc nh·ªü</p>
                <Link to="/login">
                    <Button variant="success">ƒêƒÉng nh·∫≠p</Button>
                </Link>
            </Container>
        );
    }

    return (
        <Container className="mt-4">
            <div className="d-flex justify-content-between align-items-center mb-4">
                <h3>üîî Danh s√°ch nh·∫Øc nh·ªü</h3>
                <Link to="/add-reminder">
                    <Button variant="success">+ Th√™m nh·∫Øc nh·ªü</Button>
                </Link>
            </div>

            {msg && <Alert variant="danger">{msg}</Alert>}

            {/* √î t√¨m ki·∫øm */}
            <div className="mb-3">
                <input
                    type="text"
                    className="form-control"
                    placeholder="T√¨m ki·∫øm nh·∫Øc nh·ªü theo ti√™u ƒë·ªÅ..."
                    value={search}
                    onChange={e => setSearch(e.target.value)}
                />
            </div>

            {reminders.length === 0 && !loading ? (
                <Alert variant="info">B·∫°n ch∆∞a c√≥ nh·∫Øc nh·ªü n√†o.</Alert>
            ) : (
                <Row>
                    {reminders.map((r) => (
                        <Col md={4} key={r.id} className="mb-4 d-flex align-items-stretch">
                            <Card className="shadow w-100 h-100 d-flex flex-column">
                                <Card.Body className="d-flex flex-column">
                                    <Card.Title className="d-flex justify-content-between align-items-center">
                                        <span>{r.title}</span>                                       
                                    </Card.Title>
                                    <Card.Text className="flex-grow-1">
                                        üïí <strong>{r.time}</strong><br />
                                        <strong>Lo·∫°i: {r.reminderType}</strong><br />
                                        Tr·∫°ng th√°i:{" "}
                                        {r.isActive ? (
                                            <span className="text-success">ƒêang b·∫≠t</span>
                                        ) : (
                                            <span className="text-muted">ƒê√£ t·∫Øt</span>
                                        )}
                                    </Card.Text>
                                    <div className="d-flex justify-content-between mt-3">
                                        <Button variant="primary" onClick={() => nav(`/update-reminder/${r.id}`)}>
                                            Ch·ªânh s·ª≠a
                                        </Button>
                                        <Button variant="danger" size="sm" onClick={() => deleteReminder(r.id)}>Xo√°</Button>
                                    </div>
                                </Card.Body>
                            </Card>
                        </Col>
                    ))}
                </Row>
            )}

            {loading && <MySpinner />}

            {page > 0 && !loading && reminders.length > 0 && (
                <div className="text-center mt-2">
                    <Button variant="outline-primary" onClick={() => setPage(prev => prev + 1)}>
                        Xem th√™m...
                    </Button>
                </div>
            )}
        </Container>
    );
};

export default ReminderList;
